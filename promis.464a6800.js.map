{"version":3,"sources":["js/promisification/promis.js"],"names":["delay","ms","promise","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,IAOHC,OANS,IAAIC,QAAQC,IACxBC,WAAW,KACPD,EAAQH,IACTA,MAMLK,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAGjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGtBC,EAAkB,CAACC,EAAUC,KAOxBd,OANS,IAAIC,QAAQC,IACxBA,EACIW,EAASE,IAAIC,GAASA,EAAKN,OAASI,EAAW,IAAIE,EAAML,QAASK,EAAKL,QAAWK,OAO9FJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAkBC,IACd3B,MAAAA,EAAQoB,EAA0B,IAAK,KAatClB,OAXS,IAAIC,QAAQ,CAACC,EAASwB,KAClCvB,WAAW,KACYkB,KAAKE,SAAW,GAE/BrB,EAAQ,CAAEyB,GAAIF,EAAYE,GAAItB,KAAMP,IAEpC4B,EAAOD,EAAYE,KAExB7B,MAML8B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACtBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG5CwB,EAAWF,IACbrB,QAAQwB,qCAAqCH,+BAGjDH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH","file":"promis.464a6800.js","sourceRoot":"../src","sourcesContent":["// Задание 1\nconst delay = ms => {\n    const promise = new Promise(resolve => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n\n    return promise;\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// Задание 2\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n    const promise = new Promise(resolve => {\n        resolve(\n            allUsers.map(user => (user.name === username ? {...user, active: !user.active } : user)),\n        );\n    });\n\n    return promise;\n};\n\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// Задание 3\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    const promise = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n\n    return promise;\n};\n\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);"]}